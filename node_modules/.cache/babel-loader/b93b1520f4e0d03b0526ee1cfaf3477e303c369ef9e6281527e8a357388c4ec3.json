{"ast":null,"code":"var _jsxFileName = \"/Users/rahdeshm/Desktop/App/ReactMeals/src/Store/Cart-Provider.jsx\",\n  _s = $RefreshSig$();\nimport React, { useReducer } from \"react\";\nimport CartContext from \"./Cart-Context\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst defaultCartState = {\n  items: [],\n  totalAmount: 0\n};\nconst cartReducer = (state, action) => {\n  if (action.type === 'ADD') {\n    const updatedTotalAmount = state.totalAmount + action.item.price * action.item.amount;\n    const existingCartItemIndex = state.items.findIndex(item => item.id === action.item.id);\n    const existingCartItem = state.items[existingCartItemIndex];\n    let updatedItems;\n    if (existingCartItem) {\n      const updatedItem = {\n        ...existingCartItem,\n        amount: existingCartItem.amount + 1\n      };\n      updatedItems = [...state.items];\n      updatedItems[existingCartItemIndex] = updatedItem;\n    } else {\n      updatedItems = state.items.concat(action.item);\n    }\n    return {\n      items: updatedItems,\n      totalAmount: updatedTotalAmount\n    };\n  }\n  if (action.type === 'REMOVE') {\n    console.log(state, action);\n    // const updatedTotalAmount =\n    // state.totalAmount + action.item.price * action.item.amount;\n    const existingCartItemIndex = state.items.findIndex(item => {\n      console.log(item);\n      return item.id === action.id;\n    });\n    let existingCartItem = state[existingCartItemIndex];\n    console.log(existingCartItem);\n    if (existingCartItemIndex && existingCartItem.amount === 1) {\n      const updatedItems = state.items.filter(item => {\n        return item.id !== action.id;\n      });\n      return {\n        items: updatedItems,\n        totalAmount: 0\n      };\n    } else {\n      console.log(existingCartItem);\n      let updatedItem = {\n        ...existingCartItem,\n        amount: existingCartItem.amount - 1\n      };\n      let updatedItems = [...state.items];\n      updatedItems[existingCartItemIndex] = updatedItem;\n      return {\n        items: updatedItems,\n        totalAmount: 0\n      };\n    }\n  }\n  return {\n    items: [],\n    totalAmount: 0\n  };\n};\nconst CartProvider = props => {\n  _s();\n  const [cartState, dispatchCartAction] = useReducer(cartReducer, defaultCartState);\n  const addItemToCartHandler = item => {\n    dispatchCartAction({\n      type: 'ADD',\n      item: item\n    });\n  };\n  const removeItemFromCartHandler = id => {\n    dispatchCartAction({\n      type: 'REMOVE',\n      id: id\n    });\n  };\n  const cartContext = {\n    items: cartState.items,\n    totalAmount: cartState.totalAmount,\n    addItem: addItemToCartHandler,\n    removeItem: removeItemFromCartHandler\n  };\n  return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n    value: cartContext,\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 90,\n    columnNumber: 12\n  }, this);\n};\n_s(CartProvider, \"2SyrzIf5h4zAVB5yWzJ1q/dSUlI=\");\n_c = CartProvider;\nexport default CartProvider;\n\n// import { createContext, useState, useReducer } from 'react';\n\n// import { createAction } from '../utils/reducer/reducer.utils';\n\n// const addCartItem = (cartItems, productToAdd) => {\n//   const existingCartItem = cartItems.find(\n//     (cartItem) => cartItem.id === productToAdd.id\n//   );\n\n//   if (existingCartItem) {\n//     return cartItems.map((cartItem) =>\n//       cartItem.id === productToAdd.id\n//         ? { ...cartItem, quantity: cartItem.quantity + 1 }\n//         : cartItem\n//     );\n//   }\n\n//   return [...cartItems, { ...productToAdd, quantity: 1 }];\n// };\n\n// const removeCartItem = (cartItems, cartItemToRemove) => {\n//   // find the cart item to remove\n//   const existingCartItem = cartItems.find(\n//     (cartItem) => cartItem.id === cartItemToRemove.id\n//   );\n\n//   // check if quantity is equal to 1, if it is remove that item from the cart\n//   if (existingCartItem.quantity === 1) {\n//     return cartItems.filter((cartItem) => cartItem.id !== cartItemToRemove.id);\n//   }\n\n//   // return back cartitems with matching cart item with reduced quantity\n//   return cartItems.map((cartItem) =>\n//     cartItem.id === cartItemToRemove.id\n//       ? { ...cartItem, quantity: cartItem.quantity - 1 }\n//       : cartItem\n//   );\n// };\n\n// const CART_ACTION_TYPES = {\n//   SET_IS_CART_OPEN: 'SET_IS_CART_OPEN',\n//   SET_CART_ITEMS: 'SET_CART_ITEMS',\n//   SET_CART_COUNT: 'SET_CART_COUNT',\n//   SET_CART_TOTAL: 'SET_CART_TOTAL',\n// };\n\n// const INITIAL_STATE = {\n//   isCartOpen: false,\n//   cartItems: [],\n//   cartCount: 0,\n//   cartTotal: 0,\n// };\n\n// const cartReducer = (state, action) => {\n//   const { type, payload } = action;\n\n//   switch (type) {\n//     case CART_ACTION_TYPES.SET_CART_ITEMS:\n//       return {\n//         ...state,\n//         ...payload,\n//       };\n//     default:\n//       throw new Error(`Unhandled type ${type} in cartReducer`);\n//   }\n// };\n\n// const clearCartItem = (cartItems, cartItemToClear) =>\n//   cartItems.filter((cartItem) => cartItem.id !== cartItemToClear.id);\n\n// export const CartContext = createContext({\n//   isCartOpen: false,\n//   setIsCartOpen: () => {},\n//   cartItems: [],\n//   addItemToCart: () => {},\n//   removeItemFromCart: () => {},\n//   clearItemFromCart: () => {},\n//   cartCount: 0,\n//   cartTotal: 0,\n// });\n\n// export const CartProvider = ({ children }) => {\n//   const [isCartOpen, setIsCartOpen] = useState(false);\n\n//   const [{ cartCount, cartTotal, cartItems }, dispatch] = useReducer(\n//     cartReducer,\n//     INITIAL_STATE\n//   );\n\n//   const updateCartItemsReducer = (cartItems) => {\n//     const newCartCount = cartItems.reduce(\n//       (total, cartItem) => total + cartItem.quantity,\n//       0\n//     );\n\n//   const newCartTotal = cartItems.reduce(\n//       (total, cartItem) => total + cartItem.quantity * cartItem.price,\n//       0\n//     );\n\n//   const payload = {\n//       cartItems,\n//       cartCount: newCartCount,\n//       cartTotal: newCartTotal,\n//    };\n\n//     dispatch(createAction(CART_ACTION_TYPES.SET_CART_ITEMS, payload));\n//   };\n\n//   const addItemToCart = (productToAdd) => {\n//     const newCartItems = addCartItem(cartItems, productToAdd);\n//     updateCartItemsReducer(newCartItems);\n//   };\n\n//   const removeItemToCart = (cartItemToRemove) => {\n//     const newCartItems = removeCartItem(cartItems, cartItemToRemove);\n//     updateCartItemsReducer(newCartItems);\n//   };\n\n//   const clearItemFromCart = (cartItemToClear) => {\n//     const newCartItems = clearCartItem(cartItems, cartItemToClear);\n//     updateCartItemsReducer(newCartItems);\n//   };\n\n//   const value = {\n//     isCartOpen,\n//     setIsCartOpen,\n//     addItemToCart,\n//     removeItemToCart,\n//     clearItemFromCart,\n//     cartItems,\n//     cartCount,\n//     cartTotal,\n//   };\n\n//   return <CartContext.Provider value={value}>{children}</CartContext.Provider>;\n// };\nvar _c;\n$RefreshReg$(_c, \"CartProvider\");","map":{"version":3,"names":["React","useReducer","CartContext","jsxDEV","_jsxDEV","defaultCartState","items","totalAmount","cartReducer","state","action","type","updatedTotalAmount","item","price","amount","existingCartItemIndex","findIndex","id","existingCartItem","updatedItems","updatedItem","concat","console","log","filter","CartProvider","props","_s","cartState","dispatchCartAction","addItemToCartHandler","removeItemFromCartHandler","cartContext","addItem","removeItem","Provider","value","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/rahdeshm/Desktop/App/ReactMeals/src/Store/Cart-Provider.jsx"],"sourcesContent":["import React, { useReducer } from \"react\";\nimport CartContext from \"./Cart-Context\";\n\nconst defaultCartState={\n    items:[],\n    totalAmount:0\n}\n\nconst cartReducer=(state,action)=>{\n     \n      if(action.type==='ADD'){\n        const updatedTotalAmount =\n        state.totalAmount + action.item.price * action.item.amount;\n        const existingCartItemIndex = state.items.findIndex(\n            (item) => item.id === action.item.id\n          );\n          const existingCartItem = state.items[existingCartItemIndex];\n          let updatedItems;\n      \n          if (existingCartItem) {\n            const updatedItem = {\n              ...existingCartItem,\n              amount: existingCartItem.amount + 1,\n            };\n            updatedItems = [...state.items];\n            updatedItems[existingCartItemIndex] = updatedItem;\n          } else {\n            updatedItems = state.items.concat(action.item);\n          }\n      \n          return {\n            items: updatedItems,\n            totalAmount: updatedTotalAmount,\n         };}\n      if(action.type==='REMOVE'){\n        console.log(state,action);\n        // const updatedTotalAmount =\n        // state.totalAmount + action.item.price * action.item.amount;\n        const existingCartItemIndex = state.items.findIndex(\n        \n          (item) => {\n            console.log(item);\n             return item.id === action.id\n          }\n        );\n         let existingCartItem=state[existingCartItemIndex];\n         console.log(existingCartItem);\n        if(existingCartItemIndex && existingCartItem.amount===1){\n         const updatedItems=  state.items.filter((item)=>{\n            return item.id!==action.id\n           }) \n           return {\n            items: updatedItems,\n            totalAmount: 0\n           }\n        }\n        else{\n          console.log(existingCartItem);\n         let updatedItem={...existingCartItem,amount:existingCartItem.amount-1};\n         let updatedItems=[...state.items];\n         updatedItems[existingCartItemIndex]=updatedItem;\n         return{\n          items: updatedItems,\n         totalAmount: 0,\n         }\n        }\n\n\n      }\n         return{\n            items:[],\n            totalAmount:0\n         } \n}\n\nconst CartProvider=props=>{\n    const[cartState,dispatchCartAction]=useReducer(cartReducer,defaultCartState);\n    const addItemToCartHandler=item=>{\n        dispatchCartAction({type:'ADD',item:item});\n    };\n    const removeItemFromCartHandler=id=>{\n        dispatchCartAction({type:'REMOVE',id:id})\n    };\n    const cartContext={\n        items:cartState.items,\n        totalAmount:cartState.totalAmount,\n        addItem:addItemToCartHandler,\n        removeItem:removeItemFromCartHandler\n    }\n    return <CartContext.Provider value={cartContext}>\n         {props.children}\n    </CartContext.Provider>\n}\n\nexport default CartProvider\n\n\n\n// import { createContext, useState, useReducer } from 'react';\n\n// import { createAction } from '../utils/reducer/reducer.utils';\n\n// const addCartItem = (cartItems, productToAdd) => {\n//   const existingCartItem = cartItems.find(\n//     (cartItem) => cartItem.id === productToAdd.id\n//   );\n\n//   if (existingCartItem) {\n//     return cartItems.map((cartItem) =>\n//       cartItem.id === productToAdd.id\n//         ? { ...cartItem, quantity: cartItem.quantity + 1 }\n//         : cartItem\n//     );\n//   }\n\n//   return [...cartItems, { ...productToAdd, quantity: 1 }];\n// };\n\n// const removeCartItem = (cartItems, cartItemToRemove) => {\n//   // find the cart item to remove\n//   const existingCartItem = cartItems.find(\n//     (cartItem) => cartItem.id === cartItemToRemove.id\n//   );\n\n//   // check if quantity is equal to 1, if it is remove that item from the cart\n//   if (existingCartItem.quantity === 1) {\n//     return cartItems.filter((cartItem) => cartItem.id !== cartItemToRemove.id);\n//   }\n\n//   // return back cartitems with matching cart item with reduced quantity\n//   return cartItems.map((cartItem) =>\n//     cartItem.id === cartItemToRemove.id\n//       ? { ...cartItem, quantity: cartItem.quantity - 1 }\n//       : cartItem\n//   );\n// };\n\n// const CART_ACTION_TYPES = {\n//   SET_IS_CART_OPEN: 'SET_IS_CART_OPEN',\n//   SET_CART_ITEMS: 'SET_CART_ITEMS',\n//   SET_CART_COUNT: 'SET_CART_COUNT',\n//   SET_CART_TOTAL: 'SET_CART_TOTAL',\n// };\n\n// const INITIAL_STATE = {\n//   isCartOpen: false,\n//   cartItems: [],\n//   cartCount: 0,\n//   cartTotal: 0,\n// };\n\n// const cartReducer = (state, action) => {\n//   const { type, payload } = action;\n\n//   switch (type) {\n//     case CART_ACTION_TYPES.SET_CART_ITEMS:\n//       return {\n//         ...state,\n//         ...payload,\n//       };\n//     default:\n//       throw new Error(`Unhandled type ${type} in cartReducer`);\n//   }\n// };\n\n// const clearCartItem = (cartItems, cartItemToClear) =>\n//   cartItems.filter((cartItem) => cartItem.id !== cartItemToClear.id);\n\n// export const CartContext = createContext({\n//   isCartOpen: false,\n//   setIsCartOpen: () => {},\n//   cartItems: [],\n//   addItemToCart: () => {},\n//   removeItemFromCart: () => {},\n//   clearItemFromCart: () => {},\n//   cartCount: 0,\n//   cartTotal: 0,\n// });\n\n// export const CartProvider = ({ children }) => {\n//   const [isCartOpen, setIsCartOpen] = useState(false);\n\n//   const [{ cartCount, cartTotal, cartItems }, dispatch] = useReducer(\n//     cartReducer,\n//     INITIAL_STATE\n//   );\n\n//   const updateCartItemsReducer = (cartItems) => {\n//     const newCartCount = cartItems.reduce(\n//       (total, cartItem) => total + cartItem.quantity,\n//       0\n//     );\n\n//   const newCartTotal = cartItems.reduce(\n//       (total, cartItem) => total + cartItem.quantity * cartItem.price,\n//       0\n//     );\n\n//   const payload = {\n//       cartItems,\n//       cartCount: newCartCount,\n//       cartTotal: newCartTotal,\n//    };\n\n//     dispatch(createAction(CART_ACTION_TYPES.SET_CART_ITEMS, payload));\n//   };\n\n//   const addItemToCart = (productToAdd) => {\n//     const newCartItems = addCartItem(cartItems, productToAdd);\n//     updateCartItemsReducer(newCartItems);\n//   };\n\n//   const removeItemToCart = (cartItemToRemove) => {\n//     const newCartItems = removeCartItem(cartItems, cartItemToRemove);\n//     updateCartItemsReducer(newCartItems);\n//   };\n\n//   const clearItemFromCart = (cartItemToClear) => {\n//     const newCartItems = clearCartItem(cartItems, cartItemToClear);\n//     updateCartItemsReducer(newCartItems);\n//   };\n\n//   const value = {\n//     isCartOpen,\n//     setIsCartOpen,\n//     addItemToCart,\n//     removeItemToCart,\n//     clearItemFromCart,\n//     cartItems,\n//     cartCount,\n//     cartTotal,\n//   };\n\n//   return <CartContext.Provider value={value}>{children}</CartContext.Provider>;\n// };"],"mappings":"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CH,oBAAoB;IAC5BI,UAAU,EAACH;EACf,CAAC;EACD,oBAAO5B,OAAA,CAACF,WAAW,CAACkC,QAAQ;IAACC,KAAK,EAAEJ,WAAY;IAAAK,QAAA,EAC1CX,KAAK,CAACW;EAAQ;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QACG;AAC3B,CAAC;AAAAd,EAAA,CAjBKF,YAAY;AAAAiB,EAAA,GAAZjB,YAAY;AAmBlB,eAAeA,YAAY;;AAI3B;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AAAA,IAAAiB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}